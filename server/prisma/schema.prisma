// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donor {
  id           Int     @id @default(autoincrement())
  firstName    String  @db.VarChar(50)
  lastName     String  @db.VarChar(50)
  contact      String? @db.VarChar(10)
  email        String  @db.VarChar(100)@unique
  addressLine1 String? @db.VarChar(50)
  addressLine2 String? @db.VarChar(50)
  state        String? @db.VarChar(15)
  city         String? @db.VarChar(15)
  zipcode      String  @db.VarChar(20)
  emailOptIn   Boolean
  donatedItems DonatedItem[] // Add reverse relation to DonatedItem
}

model DonatedItem {
  id            Int                 @id @default(autoincrement())
  itemType      String              @db.VarChar(50) // Define as VARCHAR(50)
  currentStatus String              @db.VarChar(20) // Define as VARCHAR(20)
  dateDonated   DateTime
  lastUpdated   DateTime            @updatedAt
  donorId       Int                 // Foreign key for Donor
  programId     Int?                 // Optional Foreign key for Program
  donor         Donor               @relation(fields: [donorId], references: [id])
  program       Program?             @relation(fields: [programId], references: [id])
  statuses      DonatedItemStatus[]  // Relation to DonatedItemStatus
}

model DonatedItemStatus {
  id            Int         @id @default(autoincrement())
  dateModified  DateTime
  statusType    String      @db.VarChar(20) // Define as VARCHAR(20)
  donatedItemId Int
  donatedItem   DonatedItem @relation(fields: [donatedItemId], references: [id], onDelete: Cascade)
  @@index([donatedItemId])
  imageUrls     String[]
}

model Program {
  id          Int      @id @default(autoincrement()) 
  name        String   @db.VarChar(100)              
  description String   @db.VarChar(500)              
  startDate   DateTime     @db.Date                          
  aimAndCause String   @db.VarChar(500)  
  donatedItems DonatedItem[] // Add reverse relation to DonatedItem            
}

enum Role {
  ADMIN
  DONOR
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role?
  createdAt DateTime @default(now())
  firstLogin        Boolean  @default(true)
  resetToken        String?
  resetTokenExpiry  DateTime?
}